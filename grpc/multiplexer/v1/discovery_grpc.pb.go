// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: grpc/multiplexer/v1/discovery.proto

package multiplexerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiscoveryServiceClient is the client API for DiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscoveryServiceClient interface {
	// ListGRPCServer lists all gRPC server that are available through the multiplexer client connection.
	ListGRPCServer(ctx context.Context, in *ListGRPCServerRequest, opts ...grpc.CallOption) (*ListGRPCServerResponse, error)
	// ListGRPCServer watches event of connection & disconnection of gRPC server accessible through multiplexer client.
	WatchGRPCServer(ctx context.Context, in *WatchGRPCServerRequest, opts ...grpc.CallOption) (DiscoveryService_WatchGRPCServerClient, error)
}

type discoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoveryServiceClient(cc grpc.ClientConnInterface) DiscoveryServiceClient {
	return &discoveryServiceClient{cc}
}

func (c *discoveryServiceClient) ListGRPCServer(ctx context.Context, in *ListGRPCServerRequest, opts ...grpc.CallOption) (*ListGRPCServerResponse, error) {
	out := new(ListGRPCServerResponse)
	err := c.cc.Invoke(ctx, "/grpc.multiplexer.v1.DiscoveryService/ListGRPCServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryServiceClient) WatchGRPCServer(ctx context.Context, in *WatchGRPCServerRequest, opts ...grpc.CallOption) (DiscoveryService_WatchGRPCServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &DiscoveryService_ServiceDesc.Streams[0], "/grpc.multiplexer.v1.DiscoveryService/WatchGRPCServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &discoveryServiceWatchGRPCServerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DiscoveryService_WatchGRPCServerClient interface {
	Recv() (*WatchGRPCServerResponse, error)
	grpc.ClientStream
}

type discoveryServiceWatchGRPCServerClient struct {
	grpc.ClientStream
}

func (x *discoveryServiceWatchGRPCServerClient) Recv() (*WatchGRPCServerResponse, error) {
	m := new(WatchGRPCServerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DiscoveryServiceServer is the server API for DiscoveryService service.
// All implementations must embed UnimplementedDiscoveryServiceServer
// for forward compatibility
type DiscoveryServiceServer interface {
	// ListGRPCServer lists all gRPC server that are available through the multiplexer client connection.
	ListGRPCServer(context.Context, *ListGRPCServerRequest) (*ListGRPCServerResponse, error)
	// ListGRPCServer watches event of connection & disconnection of gRPC server accessible through multiplexer client.
	WatchGRPCServer(*WatchGRPCServerRequest, DiscoveryService_WatchGRPCServerServer) error
	mustEmbedUnimplementedDiscoveryServiceServer()
}

// UnimplementedDiscoveryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDiscoveryServiceServer struct {
}

func (UnimplementedDiscoveryServiceServer) ListGRPCServer(context.Context, *ListGRPCServerRequest) (*ListGRPCServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGRPCServer not implemented")
}
func (UnimplementedDiscoveryServiceServer) WatchGRPCServer(*WatchGRPCServerRequest, DiscoveryService_WatchGRPCServerServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchGRPCServer not implemented")
}
func (UnimplementedDiscoveryServiceServer) mustEmbedUnimplementedDiscoveryServiceServer() {}

// UnsafeDiscoveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscoveryServiceServer will
// result in compilation errors.
type UnsafeDiscoveryServiceServer interface {
	mustEmbedUnimplementedDiscoveryServiceServer()
}

func RegisterDiscoveryServiceServer(s grpc.ServiceRegistrar, srv DiscoveryServiceServer) {
	s.RegisterService(&DiscoveryService_ServiceDesc, srv)
}

func _DiscoveryService_ListGRPCServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGRPCServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServiceServer).ListGRPCServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.multiplexer.v1.DiscoveryService/ListGRPCServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServiceServer).ListGRPCServer(ctx, req.(*ListGRPCServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryService_WatchGRPCServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchGRPCServerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiscoveryServiceServer).WatchGRPCServer(m, &discoveryServiceWatchGRPCServerServer{stream})
}

type DiscoveryService_WatchGRPCServerServer interface {
	Send(*WatchGRPCServerResponse) error
	grpc.ServerStream
}

type discoveryServiceWatchGRPCServerServer struct {
	grpc.ServerStream
}

func (x *discoveryServiceWatchGRPCServerServer) Send(m *WatchGRPCServerResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DiscoveryService_ServiceDesc is the grpc.ServiceDesc for DiscoveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscoveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.multiplexer.v1.DiscoveryService",
	HandlerType: (*DiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGRPCServer",
			Handler:    _DiscoveryService_ListGRPCServer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchGRPCServer",
			Handler:       _DiscoveryService_WatchGRPCServer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/multiplexer/v1/discovery.proto",
}
