// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: livesplit/connect/v1/livesplit.proto

package connectv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ComparisonMethod represents the current comparaison method setup in LiveSplit.
type ComparisonMethod int32

const (
	// Comparaison no specified, probably an issue with the request or LiveSplit.
	ComparisonMethod_COMPARISON_METHOD_UNSPECIFIED ComparisonMethod = 0
	// Compare again personal best (PB)
	ComparisonMethod_COMPARISON_METHOD_PERSONAL_BEST ComparisonMethod = 1
	// Compare again best segments
	ComparisonMethod_COMPARISON_METHOD_BEST_SEGMENT ComparisonMethod = 2
	// Compare again best split times
	ComparisonMethod_COMPARISON_METHOD_BEST_SPLIT_TIMES ComparisonMethod = 3
	// Compare again average segments
	ComparisonMethod_COMPARISON_METHOD_AVERAGE_SEGMENTS ComparisonMethod = 4
	// Compare again balanced PB
	ComparisonMethod_COMPARISON_METHOD_BALANCED_PB ComparisonMethod = 5
)

// Enum value maps for ComparisonMethod.
var (
	ComparisonMethod_name = map[int32]string{
		0: "COMPARISON_METHOD_UNSPECIFIED",
		1: "COMPARISON_METHOD_PERSONAL_BEST",
		2: "COMPARISON_METHOD_BEST_SEGMENT",
		3: "COMPARISON_METHOD_BEST_SPLIT_TIMES",
		4: "COMPARISON_METHOD_AVERAGE_SEGMENTS",
		5: "COMPARISON_METHOD_BALANCED_PB",
	}
	ComparisonMethod_value = map[string]int32{
		"COMPARISON_METHOD_UNSPECIFIED":      0,
		"COMPARISON_METHOD_PERSONAL_BEST":    1,
		"COMPARISON_METHOD_BEST_SEGMENT":     2,
		"COMPARISON_METHOD_BEST_SPLIT_TIMES": 3,
		"COMPARISON_METHOD_AVERAGE_SEGMENTS": 4,
		"COMPARISON_METHOD_BALANCED_PB":      5,
	}
)

func (x ComparisonMethod) Enum() *ComparisonMethod {
	p := new(ComparisonMethod)
	*p = x
	return p
}

func (x ComparisonMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComparisonMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_livesplit_connect_v1_livesplit_proto_enumTypes[0].Descriptor()
}

func (ComparisonMethod) Type() protoreflect.EnumType {
	return &file_livesplit_connect_v1_livesplit_proto_enumTypes[0]
}

func (x ComparisonMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComparisonMethod.Descriptor instead.
func (ComparisonMethod) EnumDescriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{0}
}

// TimerPhase represent the state of the timer in Livesplit.
type TimerPhase int32

const (
	// Phase not specified, probably an issue with the request or LiveSplit.
	TimerPhase_TIMER_PHASE_UNSPECIFIED TimerPhase = 0
	// Timer is not running.
	TimerPhase_TIMER_PHASE_NOT_RUNNING TimerPhase = 1
	// Timer is running.
	TimerPhase_TIMER_PHASE_RUNNING TimerPhase = 2
	// Timer is paused
	TimerPhase_TIMER_PHASE_PAUSED TimerPhase = 3
	// Timer has ended (end of the run).
	TimerPhase_TIMER_PHASE_ENDED TimerPhase = 4
)

// Enum value maps for TimerPhase.
var (
	TimerPhase_name = map[int32]string{
		0: "TIMER_PHASE_UNSPECIFIED",
		1: "TIMER_PHASE_NOT_RUNNING",
		2: "TIMER_PHASE_RUNNING",
		3: "TIMER_PHASE_PAUSED",
		4: "TIMER_PHASE_ENDED",
	}
	TimerPhase_value = map[string]int32{
		"TIMER_PHASE_UNSPECIFIED": 0,
		"TIMER_PHASE_NOT_RUNNING": 1,
		"TIMER_PHASE_RUNNING":     2,
		"TIMER_PHASE_PAUSED":      3,
		"TIMER_PHASE_ENDED":       4,
	}
)

func (x TimerPhase) Enum() *TimerPhase {
	p := new(TimerPhase)
	*p = x
	return p
}

func (x TimerPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimerPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_livesplit_connect_v1_livesplit_proto_enumTypes[1].Descriptor()
}

func (TimerPhase) Type() protoreflect.EnumType {
	return &file_livesplit_connect_v1_livesplit_proto_enumTypes[1]
}

func (x TimerPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimerPhase.Descriptor instead.
func (TimerPhase) EnumDescriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{1}
}

// TimingMethod is the current selected timing method in LiveSplit.
type TimingMethod int32

const (
	// Method not specified, probably an issue with the request or LiveSplit.
	TimingMethod_TIMING_METHOD_UNSPECIFIED TimingMethod = 0
	// Real time method is currently used.
	TimingMethod_TIMING_METHOD_REAL_TIME TimingMethod = 1
	// Game time method is currently used.
	TimingMethod_TIMING_METHOD_GAME_TIME TimingMethod = 2
)

// Enum value maps for TimingMethod.
var (
	TimingMethod_name = map[int32]string{
		0: "TIMING_METHOD_UNSPECIFIED",
		1: "TIMING_METHOD_REAL_TIME",
		2: "TIMING_METHOD_GAME_TIME",
	}
	TimingMethod_value = map[string]int32{
		"TIMING_METHOD_UNSPECIFIED": 0,
		"TIMING_METHOD_REAL_TIME":   1,
		"TIMING_METHOD_GAME_TIME":   2,
	}
)

func (x TimingMethod) Enum() *TimingMethod {
	p := new(TimingMethod)
	*p = x
	return p
}

func (x TimingMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimingMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_livesplit_connect_v1_livesplit_proto_enumTypes[2].Descriptor()
}

func (TimingMethod) Type() protoreflect.EnumType {
	return &file_livesplit_connect_v1_livesplit_proto_enumTypes[2]
}

func (x TimingMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimingMethod.Descriptor instead.
func (TimingMethod) EnumDescriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{2}
}

// SplitAction represents a split action that can be done on the LiveSplit timer.
type SplitAction int32

const (
	// Unspecified action, probably an issue with the request or LiveSplit.
	SplitAction_SPLIT_ACTION_UNSPECIFIED SplitAction = 0
	// Perform a split on current segment.
	SplitAction_SPLIT_ACTION_SPLIT SplitAction = 1
	// Skip the current split and move to the next segment.
	SplitAction_SPLIT_ACTION_SKIP SplitAction = 2
	// Undo the previous split and move to the previous segment.
	SplitAction_SPLIT_ACTION_UNDO SplitAction = 3
)

// Enum value maps for SplitAction.
var (
	SplitAction_name = map[int32]string{
		0: "SPLIT_ACTION_UNSPECIFIED",
		1: "SPLIT_ACTION_SPLIT",
		2: "SPLIT_ACTION_SKIP",
		3: "SPLIT_ACTION_UNDO",
	}
	SplitAction_value = map[string]int32{
		"SPLIT_ACTION_UNSPECIFIED": 0,
		"SPLIT_ACTION_SPLIT":       1,
		"SPLIT_ACTION_SKIP":        2,
		"SPLIT_ACTION_UNDO":        3,
	}
)

func (x SplitAction) Enum() *SplitAction {
	p := new(SplitAction)
	*p = x
	return p
}

func (x SplitAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SplitAction) Descriptor() protoreflect.EnumDescriptor {
	return file_livesplit_connect_v1_livesplit_proto_enumTypes[3].Descriptor()
}

func (SplitAction) Type() protoreflect.EnumType {
	return &file_livesplit_connect_v1_livesplit_proto_enumTypes[3]
}

func (x SplitAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SplitAction.Descriptor instead.
func (SplitAction) EnumDescriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{3}
}

// Time represents the time inside LiveSplit.
type Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The real time.
	RealTime *durationpb.Duration `protobuf:"bytes,1,opt,name=real_time,json=realTime,proto3" json:"real_time,omitempty"`
	// The game time.
	GameTime *durationpb.Duration `protobuf:"bytes,2,opt,name=game_time,json=gameTime,proto3" json:"game_time,omitempty"`
}

func (x *Time) Reset() {
	*x = Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Time) ProtoMessage() {}

func (x *Time) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Time.ProtoReflect.Descriptor instead.
func (*Time) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{0}
}

func (x *Time) GetRealTime() *durationpb.Duration {
	if x != nil {
		return x.RealTime
	}
	return nil
}

func (x *Time) GetGameTime() *durationpb.Duration {
	if x != nil {
		return x.GameTime
	}
	return nil
}

// Segment represents a portion of the run.
// A run contains multiple segments.
type Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the segment.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The current split time of the segment.
	SplitTime *Time `protobuf:"bytes,2,opt,name=split_time,json=splitTime,proto3" json:"split_time,omitempty"`
	// The best split time of all runs from the beginning on the run to this segment.
	PersonalBestSplitTime *Time `protobuf:"bytes,3,opt,name=personal_best_split_time,json=personalBestSplitTime,proto3" json:"personal_best_split_time,omitempty"`
	// The best segment time (starting from previous segment split) of all runs.
	BestSegmentTime *Time `protobuf:"bytes,4,opt,name=best_segment_time,json=bestSegmentTime,proto3" json:"best_segment_time,omitempty"`
	// The position of the segment in the segment list of the run.
	Index uint32 `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Segment) Reset() {
	*x = Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{1}
}

func (x *Segment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Segment) GetSplitTime() *Time {
	if x != nil {
		return x.SplitTime
	}
	return nil
}

func (x *Segment) GetPersonalBestSplitTime() *Time {
	if x != nil {
		return x.PersonalBestSplitTime
	}
	return nil
}

func (x *Segment) GetBestSegmentTime() *Time {
	if x != nil {
		return x.BestSegmentTime
	}
	return nil
}

func (x *Segment) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// Run represents a speedrun in LiveSplit: the game and the associated timer/segments.
type Run struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the game.
	GameName string `protobuf:"bytes,1,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`
	// The category of the speedrun.
	RunCategory string `protobuf:"bytes,2,opt,name=run_category,json=runCategory,proto3" json:"run_category,omitempty"`
	// The number of attempts (ie start of a run) done on this run.
	AttemptCount uint32 `protobuf:"varint,3,opt,name=attempt_count,json=attemptCount,proto3" json:"attempt_count,omitempty"`
	// If revelant, the region of the game (mainly used for old game on retro hardware).
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	// The platform where the game runs (PC, console...).
	Platform string `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	// If true, the game is emulated on a virtual hardware (emulator).
	UsesEmulator bool `protobuf:"varint,6,opt,name=uses_emulator,json=usesEmulator,proto3" json:"uses_emulator,omitempty"`
}

func (x *Run) Reset() {
	*x = Run{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Run) ProtoMessage() {}

func (x *Run) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Run.ProtoReflect.Descriptor instead.
func (*Run) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{2}
}

func (x *Run) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *Run) GetRunCategory() string {
	if x != nil {
		return x.RunCategory
	}
	return ""
}

func (x *Run) GetAttemptCount() uint32 {
	if x != nil {
		return x.AttemptCount
	}
	return 0
}

func (x *Run) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Run) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *Run) GetUsesEmulator() bool {
	if x != nil {
		return x.UsesEmulator
	}
	return false
}

// StartOrSplitRequest is the request message for StartOrSplit method.
type StartOrSplitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartOrSplitRequest) Reset() {
	*x = StartOrSplitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartOrSplitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartOrSplitRequest) ProtoMessage() {}

func (x *StartOrSplitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartOrSplitRequest.ProtoReflect.Descriptor instead.
func (*StartOrSplitRequest) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{3}
}

// StartOrSplitResponse is the response message for StartOrSplit method.
type StartOrSplitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartOrSplitResponse) Reset() {
	*x = StartOrSplitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartOrSplitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartOrSplitResponse) ProtoMessage() {}

func (x *StartOrSplitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartOrSplitResponse.ProtoReflect.Descriptor instead.
func (*StartOrSplitResponse) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{4}
}

// SkipSplitRequest is the request message for SkipSplit method.
type SkipSplitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SkipSplitRequest) Reset() {
	*x = SkipSplitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkipSplitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkipSplitRequest) ProtoMessage() {}

func (x *SkipSplitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkipSplitRequest.ProtoReflect.Descriptor instead.
func (*SkipSplitRequest) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{5}
}

// SkipSplitResponse is the response message for SkipSplit method.
type SkipSplitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SkipSplitResponse) Reset() {
	*x = SkipSplitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkipSplitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkipSplitResponse) ProtoMessage() {}

func (x *SkipSplitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkipSplitResponse.ProtoReflect.Descriptor instead.
func (*SkipSplitResponse) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{6}
}

// UnSplitRequest is the request message for UnSplit method.
type UnSplitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnSplitRequest) Reset() {
	*x = UnSplitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnSplitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnSplitRequest) ProtoMessage() {}

func (x *UnSplitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnSplitRequest.ProtoReflect.Descriptor instead.
func (*UnSplitRequest) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{7}
}

// UnSplitResponse is the response message for UnSplit method.
type UnSplitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnSplitResponse) Reset() {
	*x = UnSplitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnSplitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnSplitResponse) ProtoMessage() {}

func (x *UnSplitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnSplitResponse.ProtoReflect.Descriptor instead.
func (*UnSplitResponse) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{8}
}

// PauseRequest is the request message for Pause method.
type PauseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PauseRequest) Reset() {
	*x = PauseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseRequest) ProtoMessage() {}

func (x *PauseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseRequest.ProtoReflect.Descriptor instead.
func (*PauseRequest) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{9}
}

// PauseResponse is the response message for Pause method.
type PauseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PauseResponse) Reset() {
	*x = PauseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseResponse) ProtoMessage() {}

func (x *PauseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseResponse.ProtoReflect.Descriptor instead.
func (*PauseResponse) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{10}
}

// ResetRequest is the request message for Reset method.
type ResetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetRequest) Reset() {
	*x = ResetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetRequest) ProtoMessage() {}

func (x *ResetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetRequest.ProtoReflect.Descriptor instead.
func (*ResetRequest) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{11}
}

// ResetResponse is the response message for Reset method.
type ResetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetResponse) Reset() {
	*x = ResetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetResponse) ProtoMessage() {}

func (x *ResetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetResponse.ProtoReflect.Descriptor instead.
func (*ResetResponse) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{12}
}

// GetTimeRequest is the request message for GetTime method.
type GetTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTimeRequest) Reset() {
	*x = GetTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimeRequest) ProtoMessage() {}

func (x *GetTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimeRequest.ProtoReflect.Descriptor instead.
func (*GetTimeRequest) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{13}
}

// GetTimeResponse is the response message for GetTime method.
type GetTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current time of the run in LiveSplit.
	Time *Time `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *GetTimeResponse) Reset() {
	*x = GetTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimeResponse) ProtoMessage() {}

func (x *GetTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimeResponse.ProtoReflect.Descriptor instead.
func (*GetTimeResponse) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{14}
}

func (x *GetTimeResponse) GetTime() *Time {
	if x != nil {
		return x.Time
	}
	return nil
}

// GetCurrentSegmentRequest is the request message for GetCurrentSegment method.
type GetCurrentSegmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCurrentSegmentRequest) Reset() {
	*x = GetCurrentSegmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentSegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentSegmentRequest) ProtoMessage() {}

func (x *GetCurrentSegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentSegmentRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentSegmentRequest) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{15}
}

// GetCurrentSegmentResponse is the response message for GetCurrentSegment method.
type GetCurrentSegmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current segment of the run in LiveSplit.
	Segment *Segment `protobuf:"bytes,1,opt,name=segment,proto3" json:"segment,omitempty"`
}

func (x *GetCurrentSegmentResponse) Reset() {
	*x = GetCurrentSegmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentSegmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentSegmentResponse) ProtoMessage() {}

func (x *GetCurrentSegmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentSegmentResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentSegmentResponse) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{16}
}

func (x *GetCurrentSegmentResponse) GetSegment() *Segment {
	if x != nil {
		return x.Segment
	}
	return nil
}

// FindSegmentRequest is the request message for FindSegment method.
type FindSegmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The exact name of the segment to find.
	SegmentName string `protobuf:"bytes,1,opt,name=segment_name,json=segmentName,proto3" json:"segment_name,omitempty"`
}

func (x *FindSegmentRequest) Reset() {
	*x = FindSegmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSegmentRequest) ProtoMessage() {}

func (x *FindSegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSegmentRequest.ProtoReflect.Descriptor instead.
func (*FindSegmentRequest) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{17}
}

func (x *FindSegmentRequest) GetSegmentName() string {
	if x != nil {
		return x.SegmentName
	}
	return ""
}

// FindSegmentResponse is the response message for FindSegment method.
type FindSegmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The searched segment. `null` if not segment is associated with previous name.
	Segment *Segment `protobuf:"bytes,1,opt,name=segment,proto3" json:"segment,omitempty"`
}

func (x *FindSegmentResponse) Reset() {
	*x = FindSegmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSegmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSegmentResponse) ProtoMessage() {}

func (x *FindSegmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSegmentResponse.ProtoReflect.Descriptor instead.
func (*FindSegmentResponse) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{18}
}

func (x *FindSegmentResponse) GetSegment() *Segment {
	if x != nil {
		return x.Segment
	}
	return nil
}

// ListSegmentRequest is the request message for ListSegment method.
type ListSegmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSegmentRequest) Reset() {
	*x = ListSegmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSegmentRequest) ProtoMessage() {}

func (x *ListSegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSegmentRequest.ProtoReflect.Descriptor instead.
func (*ListSegmentRequest) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{19}
}

// ListSegmentResponse is the response message for ListSegment method.
type ListSegmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The complete list of segment in the run.
	Segments []*Segment `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *ListSegmentResponse) Reset() {
	*x = ListSegmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSegmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSegmentResponse) ProtoMessage() {}

func (x *ListSegmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSegmentResponse.ProtoReflect.Descriptor instead.
func (*ListSegmentResponse) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{20}
}

func (x *ListSegmentResponse) GetSegments() []*Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

// GetRunRequest is the request message for GetRun method.
type GetRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRunRequest) Reset() {
	*x = GetRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunRequest) ProtoMessage() {}

func (x *GetRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunRequest.ProtoReflect.Descriptor instead.
func (*GetRunRequest) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{21}
}

// GetRunResponse is the response message for GetRun method.
type GetRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The info of the current speedrun in LiveSplit.
	Run *Run `protobuf:"bytes,1,opt,name=run,proto3" json:"run,omitempty"`
}

func (x *GetRunResponse) Reset() {
	*x = GetRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunResponse) ProtoMessage() {}

func (x *GetRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunResponse.ProtoReflect.Descriptor instead.
func (*GetRunResponse) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{22}
}

func (x *GetRunResponse) GetRun() *Run {
	if x != nil {
		return x.Run
	}
	return nil
}

// GetCurrentComparisonMethodRequest is the request message for GetCurrentComparisonMethod method.
type GetCurrentComparisonMethodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCurrentComparisonMethodRequest) Reset() {
	*x = GetCurrentComparisonMethodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentComparisonMethodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentComparisonMethodRequest) ProtoMessage() {}

func (x *GetCurrentComparisonMethodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentComparisonMethodRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentComparisonMethodRequest) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{23}
}

// GetCurrentComparisonMethodResponse is the response message for GetCurrentComparisonMethod method.
type GetCurrentComparisonMethodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current selected comparaison method.
	Method ComparisonMethod `protobuf:"varint,1,opt,name=method,proto3,enum=livesplit.connect.v1.ComparisonMethod" json:"method,omitempty"`
}

func (x *GetCurrentComparisonMethodResponse) Reset() {
	*x = GetCurrentComparisonMethodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentComparisonMethodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentComparisonMethodResponse) ProtoMessage() {}

func (x *GetCurrentComparisonMethodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentComparisonMethodResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentComparisonMethodResponse) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{24}
}

func (x *GetCurrentComparisonMethodResponse) GetMethod() ComparisonMethod {
	if x != nil {
		return x.Method
	}
	return ComparisonMethod_COMPARISON_METHOD_UNSPECIFIED
}

// GetCurrentTimerPhaseRequest is the request message for GetCurrentTimerPhase method.
type GetCurrentTimerPhaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCurrentTimerPhaseRequest) Reset() {
	*x = GetCurrentTimerPhaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentTimerPhaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentTimerPhaseRequest) ProtoMessage() {}

func (x *GetCurrentTimerPhaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentTimerPhaseRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentTimerPhaseRequest) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{25}
}

// GetCurrentTimerPhaseResponse is the response message for GetCurrentTimerPhase method.
type GetCurrentTimerPhaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current timer phase in LiveSplit
	Phase TimerPhase `protobuf:"varint,1,opt,name=phase,proto3,enum=livesplit.connect.v1.TimerPhase" json:"phase,omitempty"`
}

func (x *GetCurrentTimerPhaseResponse) Reset() {
	*x = GetCurrentTimerPhaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentTimerPhaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentTimerPhaseResponse) ProtoMessage() {}

func (x *GetCurrentTimerPhaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentTimerPhaseResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentTimerPhaseResponse) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{26}
}

func (x *GetCurrentTimerPhaseResponse) GetPhase() TimerPhase {
	if x != nil {
		return x.Phase
	}
	return TimerPhase_TIMER_PHASE_UNSPECIFIED
}

// GetCurrentTimingMethodRequest is the request message for GetCurrentTimingMethod method.
type GetCurrentTimingMethodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCurrentTimingMethodRequest) Reset() {
	*x = GetCurrentTimingMethodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentTimingMethodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentTimingMethodRequest) ProtoMessage() {}

func (x *GetCurrentTimingMethodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentTimingMethodRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentTimingMethodRequest) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{27}
}

// GetCurrentTimingMethodResponse is the response message for GetCurrentTimingMethod method.
type GetCurrentTimingMethodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current selected timing method.
	Method TimingMethod `protobuf:"varint,1,opt,name=method,proto3,enum=livesplit.connect.v1.TimingMethod" json:"method,omitempty"`
}

func (x *GetCurrentTimingMethodResponse) Reset() {
	*x = GetCurrentTimingMethodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentTimingMethodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentTimingMethodResponse) ProtoMessage() {}

func (x *GetCurrentTimingMethodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentTimingMethodResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentTimingMethodResponse) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{28}
}

func (x *GetCurrentTimingMethodResponse) GetMethod() TimingMethod {
	if x != nil {
		return x.Method
	}
	return TimingMethod_TIMING_METHOD_UNSPECIFIED
}

// WatchTimeRequest is the request message for WatchTime method.
type WatchTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify how often server streams the current time in LiveSplit to the client.
	RefreshRate *durationpb.Duration `protobuf:"bytes,1,opt,name=refresh_rate,json=refreshRate,proto3" json:"refresh_rate,omitempty"`
}

func (x *WatchTimeRequest) Reset() {
	*x = WatchTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchTimeRequest) ProtoMessage() {}

func (x *WatchTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchTimeRequest.ProtoReflect.Descriptor instead.
func (*WatchTimeRequest) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{29}
}

func (x *WatchTimeRequest) GetRefreshRate() *durationpb.Duration {
	if x != nil {
		return x.RefreshRate
	}
	return nil
}

// WatchTimeResponse is the response message for WatchTime method.
type WatchTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current time of the run in LiveSplit.
	CurrentTime *Time `protobuf:"bytes,1,opt,name=current_time,json=currentTime,proto3" json:"current_time,omitempty"`
}

func (x *WatchTimeResponse) Reset() {
	*x = WatchTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchTimeResponse) ProtoMessage() {}

func (x *WatchTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchTimeResponse.ProtoReflect.Descriptor instead.
func (*WatchTimeResponse) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{30}
}

func (x *WatchTimeResponse) GetCurrentTime() *Time {
	if x != nil {
		return x.CurrentTime
	}
	return nil
}

// WatchTimerPhaseRequest is the request message for WatchTimerPhase method.
type WatchTimerPhaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchTimerPhaseRequest) Reset() {
	*x = WatchTimerPhaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchTimerPhaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchTimerPhaseRequest) ProtoMessage() {}

func (x *WatchTimerPhaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchTimerPhaseRequest.ProtoReflect.Descriptor instead.
func (*WatchTimerPhaseRequest) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{31}
}

// WatchTimerPhaseResponse is the response message for WatchTimerPhase method.
type WatchTimerPhaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated timer phase after a change event inside LiveSplit.
	Phase TimerPhase `protobuf:"varint,1,opt,name=phase,proto3,enum=livesplit.connect.v1.TimerPhase" json:"phase,omitempty"`
}

func (x *WatchTimerPhaseResponse) Reset() {
	*x = WatchTimerPhaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchTimerPhaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchTimerPhaseResponse) ProtoMessage() {}

func (x *WatchTimerPhaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchTimerPhaseResponse.ProtoReflect.Descriptor instead.
func (*WatchTimerPhaseResponse) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{32}
}

func (x *WatchTimerPhaseResponse) GetPhase() TimerPhase {
	if x != nil {
		return x.Phase
	}
	return TimerPhase_TIMER_PHASE_UNSPECIFIED
}

// WatchSplitRequest is the request message for WatchSplit method.
type WatchSplitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchSplitRequest) Reset() {
	*x = WatchSplitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchSplitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchSplitRequest) ProtoMessage() {}

func (x *WatchSplitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchSplitRequest.ProtoReflect.Descriptor instead.
func (*WatchSplitRequest) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{33}
}

// WatchSplitResponse is the response message for WatchSplit method.
type WatchSplitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The segment that has just been actionated in the run.
	Segment *Segment `protobuf:"bytes,1,opt,name=segment,proto3" json:"segment,omitempty"`
	// The action associated with the split.
	Action SplitAction `protobuf:"varint,2,opt,name=action,proto3,enum=livesplit.connect.v1.SplitAction" json:"action,omitempty"`
}

func (x *WatchSplitResponse) Reset() {
	*x = WatchSplitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchSplitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchSplitResponse) ProtoMessage() {}

func (x *WatchSplitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchSplitResponse.ProtoReflect.Descriptor instead.
func (*WatchSplitResponse) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{34}
}

func (x *WatchSplitResponse) GetSegment() *Segment {
	if x != nil {
		return x.Segment
	}
	return nil
}

func (x *WatchSplitResponse) GetAction() SplitAction {
	if x != nil {
		return x.Action
	}
	return SplitAction_SPLIT_ACTION_UNSPECIFIED
}

// WatchRunRequest is the request message for WatchRun method.
type WatchRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchRunRequest) Reset() {
	*x = WatchRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRunRequest) ProtoMessage() {}

func (x *WatchRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRunRequest.ProtoReflect.Descriptor instead.
func (*WatchRunRequest) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{35}
}

// WatchRunResponse is the response message for WatchRun method.
type WatchRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The new information of the run, triggered after for instance a new run file load.
	Run *Run `protobuf:"bytes,1,opt,name=run,proto3" json:"run,omitempty"`
}

func (x *WatchRunResponse) Reset() {
	*x = WatchRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRunResponse) ProtoMessage() {}

func (x *WatchRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livesplit_connect_v1_livesplit_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRunResponse.ProtoReflect.Descriptor instead.
func (*WatchRunResponse) Descriptor() ([]byte, []int) {
	return file_livesplit_connect_v1_livesplit_proto_rawDescGZIP(), []int{36}
}

func (x *WatchRunResponse) GetRun() *Run {
	if x != nil {
		return x.Run
	}
	return nil
}

var File_livesplit_connect_v1_livesplit_proto protoreflect.FileDescriptor

var file_livesplit_connect_v1_livesplit_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x76, 0x0a, 0x04,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x53, 0x0a, 0x18, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x15, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x65, 0x73, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0f, 0x62, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0xc3, 0x01, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x75, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x65, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x73,
	0x45, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4f, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x16, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x6b, 0x69, 0x70, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x53,
	0x6b, 0x69, 0x70, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x10, 0x0a, 0x0e, 0x55, 0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x55, 0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x1a, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x37,
	0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x0f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x3d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x03, 0x72, 0x75, 0x6e, 0x22,
	0x23, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x64, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x5c, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x22, 0x50, 0x0a, 0x10, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x61,
	0x74, 0x65, 0x22, 0x52, 0x0a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x51, 0x0a, 0x17, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x11, 0x0a, 0x0f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3f, 0x0a, 0x10, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x72, 0x75,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x75, 0x6e, 0x52, 0x03, 0x72, 0x75, 0x6e, 0x2a, 0xf1, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x1d,
	0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x42, 0x45,
	0x53, 0x54, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53,
	0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x53,
	0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x4d, 0x50,
	0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x42, 0x45,
	0x53, 0x54, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x10, 0x03,
	0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4d, 0x50,
	0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x42, 0x41,
	0x4c, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x5f, 0x50, 0x42, 0x10, 0x05, 0x2a, 0x8e, 0x01, 0x0a, 0x0a,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x49,
	0x4d, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x49, 0x4d, 0x45, 0x52,
	0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x50, 0x48,
	0x41, 0x53, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x41, 0x55,
	0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x50,
	0x48, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x67, 0x0a, 0x0c,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x19,
	0x54, 0x49, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x54,
	0x49, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x52, 0x45, 0x41,
	0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x49, 0x4d, 0x49,
	0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x02, 0x2a, 0x71, 0x0a, 0x0b, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x50,
	0x4c, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x4f, 0x10, 0x03, 0x32, 0xe7, 0x0d, 0x0a, 0x10, 0x4c, 0x69, 0x76,
	0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x65, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x29, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x72, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x70, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x12, 0x26, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x69, 0x70, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6b, 0x69, 0x70, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x56, 0x0a, 0x07, 0x55, 0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x24, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x05,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0b,
	0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x62, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x28, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x23,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x37, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x31, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x33, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5e, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x70, 0x0a, 0x0f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x2c, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x61, 0x0a, 0x0a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x12, 0x27, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x5b, 0x0a, 0x08, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75,
	0x6e, 0x12, 0x25, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x42, 0xec, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x42,
	0x0e, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x75,
	0x68, 0x72, 0x6d, 0x61, 0x6e, 0x6e, 0x62, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x5f, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78,
	0x65, 0x72, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x4c, 0x43, 0x58, 0xaa, 0x02, 0x14, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x14, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x20, 0x4c, 0x69, 0x76, 0x65, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x5c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16, 0x4c, 0x69, 0x76, 0x65, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_livesplit_connect_v1_livesplit_proto_rawDescOnce sync.Once
	file_livesplit_connect_v1_livesplit_proto_rawDescData = file_livesplit_connect_v1_livesplit_proto_rawDesc
)

func file_livesplit_connect_v1_livesplit_proto_rawDescGZIP() []byte {
	file_livesplit_connect_v1_livesplit_proto_rawDescOnce.Do(func() {
		file_livesplit_connect_v1_livesplit_proto_rawDescData = protoimpl.X.CompressGZIP(file_livesplit_connect_v1_livesplit_proto_rawDescData)
	})
	return file_livesplit_connect_v1_livesplit_proto_rawDescData
}

var file_livesplit_connect_v1_livesplit_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_livesplit_connect_v1_livesplit_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_livesplit_connect_v1_livesplit_proto_goTypes = []interface{}{
	(ComparisonMethod)(0),                      // 0: livesplit.connect.v1.ComparisonMethod
	(TimerPhase)(0),                            // 1: livesplit.connect.v1.TimerPhase
	(TimingMethod)(0),                          // 2: livesplit.connect.v1.TimingMethod
	(SplitAction)(0),                           // 3: livesplit.connect.v1.SplitAction
	(*Time)(nil),                               // 4: livesplit.connect.v1.Time
	(*Segment)(nil),                            // 5: livesplit.connect.v1.Segment
	(*Run)(nil),                                // 6: livesplit.connect.v1.Run
	(*StartOrSplitRequest)(nil),                // 7: livesplit.connect.v1.StartOrSplitRequest
	(*StartOrSplitResponse)(nil),               // 8: livesplit.connect.v1.StartOrSplitResponse
	(*SkipSplitRequest)(nil),                   // 9: livesplit.connect.v1.SkipSplitRequest
	(*SkipSplitResponse)(nil),                  // 10: livesplit.connect.v1.SkipSplitResponse
	(*UnSplitRequest)(nil),                     // 11: livesplit.connect.v1.UnSplitRequest
	(*UnSplitResponse)(nil),                    // 12: livesplit.connect.v1.UnSplitResponse
	(*PauseRequest)(nil),                       // 13: livesplit.connect.v1.PauseRequest
	(*PauseResponse)(nil),                      // 14: livesplit.connect.v1.PauseResponse
	(*ResetRequest)(nil),                       // 15: livesplit.connect.v1.ResetRequest
	(*ResetResponse)(nil),                      // 16: livesplit.connect.v1.ResetResponse
	(*GetTimeRequest)(nil),                     // 17: livesplit.connect.v1.GetTimeRequest
	(*GetTimeResponse)(nil),                    // 18: livesplit.connect.v1.GetTimeResponse
	(*GetCurrentSegmentRequest)(nil),           // 19: livesplit.connect.v1.GetCurrentSegmentRequest
	(*GetCurrentSegmentResponse)(nil),          // 20: livesplit.connect.v1.GetCurrentSegmentResponse
	(*FindSegmentRequest)(nil),                 // 21: livesplit.connect.v1.FindSegmentRequest
	(*FindSegmentResponse)(nil),                // 22: livesplit.connect.v1.FindSegmentResponse
	(*ListSegmentRequest)(nil),                 // 23: livesplit.connect.v1.ListSegmentRequest
	(*ListSegmentResponse)(nil),                // 24: livesplit.connect.v1.ListSegmentResponse
	(*GetRunRequest)(nil),                      // 25: livesplit.connect.v1.GetRunRequest
	(*GetRunResponse)(nil),                     // 26: livesplit.connect.v1.GetRunResponse
	(*GetCurrentComparisonMethodRequest)(nil),  // 27: livesplit.connect.v1.GetCurrentComparisonMethodRequest
	(*GetCurrentComparisonMethodResponse)(nil), // 28: livesplit.connect.v1.GetCurrentComparisonMethodResponse
	(*GetCurrentTimerPhaseRequest)(nil),        // 29: livesplit.connect.v1.GetCurrentTimerPhaseRequest
	(*GetCurrentTimerPhaseResponse)(nil),       // 30: livesplit.connect.v1.GetCurrentTimerPhaseResponse
	(*GetCurrentTimingMethodRequest)(nil),      // 31: livesplit.connect.v1.GetCurrentTimingMethodRequest
	(*GetCurrentTimingMethodResponse)(nil),     // 32: livesplit.connect.v1.GetCurrentTimingMethodResponse
	(*WatchTimeRequest)(nil),                   // 33: livesplit.connect.v1.WatchTimeRequest
	(*WatchTimeResponse)(nil),                  // 34: livesplit.connect.v1.WatchTimeResponse
	(*WatchTimerPhaseRequest)(nil),             // 35: livesplit.connect.v1.WatchTimerPhaseRequest
	(*WatchTimerPhaseResponse)(nil),            // 36: livesplit.connect.v1.WatchTimerPhaseResponse
	(*WatchSplitRequest)(nil),                  // 37: livesplit.connect.v1.WatchSplitRequest
	(*WatchSplitResponse)(nil),                 // 38: livesplit.connect.v1.WatchSplitResponse
	(*WatchRunRequest)(nil),                    // 39: livesplit.connect.v1.WatchRunRequest
	(*WatchRunResponse)(nil),                   // 40: livesplit.connect.v1.WatchRunResponse
	(*durationpb.Duration)(nil),                // 41: google.protobuf.Duration
}
var file_livesplit_connect_v1_livesplit_proto_depIdxs = []int32{
	41, // 0: livesplit.connect.v1.Time.real_time:type_name -> google.protobuf.Duration
	41, // 1: livesplit.connect.v1.Time.game_time:type_name -> google.protobuf.Duration
	4,  // 2: livesplit.connect.v1.Segment.split_time:type_name -> livesplit.connect.v1.Time
	4,  // 3: livesplit.connect.v1.Segment.personal_best_split_time:type_name -> livesplit.connect.v1.Time
	4,  // 4: livesplit.connect.v1.Segment.best_segment_time:type_name -> livesplit.connect.v1.Time
	4,  // 5: livesplit.connect.v1.GetTimeResponse.time:type_name -> livesplit.connect.v1.Time
	5,  // 6: livesplit.connect.v1.GetCurrentSegmentResponse.segment:type_name -> livesplit.connect.v1.Segment
	5,  // 7: livesplit.connect.v1.FindSegmentResponse.segment:type_name -> livesplit.connect.v1.Segment
	5,  // 8: livesplit.connect.v1.ListSegmentResponse.segments:type_name -> livesplit.connect.v1.Segment
	6,  // 9: livesplit.connect.v1.GetRunResponse.run:type_name -> livesplit.connect.v1.Run
	0,  // 10: livesplit.connect.v1.GetCurrentComparisonMethodResponse.method:type_name -> livesplit.connect.v1.ComparisonMethod
	1,  // 11: livesplit.connect.v1.GetCurrentTimerPhaseResponse.phase:type_name -> livesplit.connect.v1.TimerPhase
	2,  // 12: livesplit.connect.v1.GetCurrentTimingMethodResponse.method:type_name -> livesplit.connect.v1.TimingMethod
	41, // 13: livesplit.connect.v1.WatchTimeRequest.refresh_rate:type_name -> google.protobuf.Duration
	4,  // 14: livesplit.connect.v1.WatchTimeResponse.current_time:type_name -> livesplit.connect.v1.Time
	1,  // 15: livesplit.connect.v1.WatchTimerPhaseResponse.phase:type_name -> livesplit.connect.v1.TimerPhase
	5,  // 16: livesplit.connect.v1.WatchSplitResponse.segment:type_name -> livesplit.connect.v1.Segment
	3,  // 17: livesplit.connect.v1.WatchSplitResponse.action:type_name -> livesplit.connect.v1.SplitAction
	6,  // 18: livesplit.connect.v1.WatchRunResponse.run:type_name -> livesplit.connect.v1.Run
	7,  // 19: livesplit.connect.v1.LiveSplitService.StartOrSplit:input_type -> livesplit.connect.v1.StartOrSplitRequest
	9,  // 20: livesplit.connect.v1.LiveSplitService.SkipSplit:input_type -> livesplit.connect.v1.SkipSplitRequest
	11, // 21: livesplit.connect.v1.LiveSplitService.UnSplit:input_type -> livesplit.connect.v1.UnSplitRequest
	13, // 22: livesplit.connect.v1.LiveSplitService.Pause:input_type -> livesplit.connect.v1.PauseRequest
	15, // 23: livesplit.connect.v1.LiveSplitService.Reset:input_type -> livesplit.connect.v1.ResetRequest
	17, // 24: livesplit.connect.v1.LiveSplitService.GetTime:input_type -> livesplit.connect.v1.GetTimeRequest
	19, // 25: livesplit.connect.v1.LiveSplitService.GetCurrentSegment:input_type -> livesplit.connect.v1.GetCurrentSegmentRequest
	21, // 26: livesplit.connect.v1.LiveSplitService.FindSegment:input_type -> livesplit.connect.v1.FindSegmentRequest
	23, // 27: livesplit.connect.v1.LiveSplitService.ListSegment:input_type -> livesplit.connect.v1.ListSegmentRequest
	25, // 28: livesplit.connect.v1.LiveSplitService.GetRun:input_type -> livesplit.connect.v1.GetRunRequest
	27, // 29: livesplit.connect.v1.LiveSplitService.GetCurrentComparisonMethod:input_type -> livesplit.connect.v1.GetCurrentComparisonMethodRequest
	29, // 30: livesplit.connect.v1.LiveSplitService.GetCurrentTimerPhase:input_type -> livesplit.connect.v1.GetCurrentTimerPhaseRequest
	31, // 31: livesplit.connect.v1.LiveSplitService.GetCurrentTimingMethod:input_type -> livesplit.connect.v1.GetCurrentTimingMethodRequest
	33, // 32: livesplit.connect.v1.LiveSplitService.WatchTime:input_type -> livesplit.connect.v1.WatchTimeRequest
	35, // 33: livesplit.connect.v1.LiveSplitService.WatchTimerPhase:input_type -> livesplit.connect.v1.WatchTimerPhaseRequest
	37, // 34: livesplit.connect.v1.LiveSplitService.WatchSplit:input_type -> livesplit.connect.v1.WatchSplitRequest
	39, // 35: livesplit.connect.v1.LiveSplitService.WatchRun:input_type -> livesplit.connect.v1.WatchRunRequest
	8,  // 36: livesplit.connect.v1.LiveSplitService.StartOrSplit:output_type -> livesplit.connect.v1.StartOrSplitResponse
	10, // 37: livesplit.connect.v1.LiveSplitService.SkipSplit:output_type -> livesplit.connect.v1.SkipSplitResponse
	12, // 38: livesplit.connect.v1.LiveSplitService.UnSplit:output_type -> livesplit.connect.v1.UnSplitResponse
	14, // 39: livesplit.connect.v1.LiveSplitService.Pause:output_type -> livesplit.connect.v1.PauseResponse
	16, // 40: livesplit.connect.v1.LiveSplitService.Reset:output_type -> livesplit.connect.v1.ResetResponse
	18, // 41: livesplit.connect.v1.LiveSplitService.GetTime:output_type -> livesplit.connect.v1.GetTimeResponse
	20, // 42: livesplit.connect.v1.LiveSplitService.GetCurrentSegment:output_type -> livesplit.connect.v1.GetCurrentSegmentResponse
	22, // 43: livesplit.connect.v1.LiveSplitService.FindSegment:output_type -> livesplit.connect.v1.FindSegmentResponse
	24, // 44: livesplit.connect.v1.LiveSplitService.ListSegment:output_type -> livesplit.connect.v1.ListSegmentResponse
	26, // 45: livesplit.connect.v1.LiveSplitService.GetRun:output_type -> livesplit.connect.v1.GetRunResponse
	28, // 46: livesplit.connect.v1.LiveSplitService.GetCurrentComparisonMethod:output_type -> livesplit.connect.v1.GetCurrentComparisonMethodResponse
	30, // 47: livesplit.connect.v1.LiveSplitService.GetCurrentTimerPhase:output_type -> livesplit.connect.v1.GetCurrentTimerPhaseResponse
	32, // 48: livesplit.connect.v1.LiveSplitService.GetCurrentTimingMethod:output_type -> livesplit.connect.v1.GetCurrentTimingMethodResponse
	34, // 49: livesplit.connect.v1.LiveSplitService.WatchTime:output_type -> livesplit.connect.v1.WatchTimeResponse
	36, // 50: livesplit.connect.v1.LiveSplitService.WatchTimerPhase:output_type -> livesplit.connect.v1.WatchTimerPhaseResponse
	38, // 51: livesplit.connect.v1.LiveSplitService.WatchSplit:output_type -> livesplit.connect.v1.WatchSplitResponse
	40, // 52: livesplit.connect.v1.LiveSplitService.WatchRun:output_type -> livesplit.connect.v1.WatchRunResponse
	36, // [36:53] is the sub-list for method output_type
	19, // [19:36] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_livesplit_connect_v1_livesplit_proto_init() }
func file_livesplit_connect_v1_livesplit_proto_init() {
	if File_livesplit_connect_v1_livesplit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_livesplit_connect_v1_livesplit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Run); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartOrSplitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartOrSplitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkipSplitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkipSplitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnSplitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnSplitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentSegmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentSegmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSegmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSegmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSegmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSegmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentComparisonMethodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentComparisonMethodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentTimerPhaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentTimerPhaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentTimingMethodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentTimingMethodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTimerPhaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTimerPhaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchSplitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchSplitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livesplit_connect_v1_livesplit_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_livesplit_connect_v1_livesplit_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_livesplit_connect_v1_livesplit_proto_goTypes,
		DependencyIndexes: file_livesplit_connect_v1_livesplit_proto_depIdxs,
		EnumInfos:         file_livesplit_connect_v1_livesplit_proto_enumTypes,
		MessageInfos:      file_livesplit_connect_v1_livesplit_proto_msgTypes,
	}.Build()
	File_livesplit_connect_v1_livesplit_proto = out.File
	file_livesplit_connect_v1_livesplit_proto_rawDesc = nil
	file_livesplit_connect_v1_livesplit_proto_goTypes = nil
	file_livesplit_connect_v1_livesplit_proto_depIdxs = nil
}
